{"version":3,"sources":["constants/constants.ts","components/About.tsx","components/Header.tsx","components/TodoForm.tsx","components/Todo.tsx","components/TodoList.tsx","contexts/todosContext.ts","contexts/filteredListContext.ts","components/FilterPanel.tsx","components/MainPage.tsx","components/App.tsx","utils/storage.ts","reportWebVitals.ts","index.tsx"],"names":["TODOS_KEY","About","history","useHistory","className","type","id","name","onClick","push","Header","exact","to","TodoForm","props","useState","value","setValue","onAddTodo","addIconClassName","classNames","onSubmit","event","preventDefault","onChange","evt","target","placeholder","htmlFor","disabled","title","Todo","completed","todoText","isImportant","onToggle","handleClickDeleteIcon","onTogglePriority","todoClassName","priorityIconClassName","checked","TodoList","todos","length","map","todo","TodosContext","createContext","FilteredListContext","FilterPanel","setFilteredListToState","todosList","useContext","searchIconClassName","filteredList","filter","toLowerCase","includes","MainPage","handleAddTodo","toggleTodo","togglePriority","isFiltered","App","datakey","TodosProvider","Provider","FilteredListProvider","JSON","parse","localStorage","getItem","setTodos","setFilteredList","setIsFiltered","useCallback","newTodo","Date","now","prev","newFilteredList","isFilteredNewValue","useEffect","data","setItem","stringify","setDataToStorage","path","render","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87b09c0d.chunk.js","sourcesContent":["export const TODOS_KEY:string = 'todos';\nexport const TODOLIST_IS_EMPTY:string = \"You haven`t any to-do at this time!\";\nexport const BACK_BUTTON_LABEL:string = \"Back to the to-do list\";\nexport const LOGO_TEXT:string = \"React & Typescript\";\nexport const TODOLIST_LINK_LABEL:string = \"To-do list\";\nexport const ABOUT_LINK_LABEL: string = \"About application\";\nexport const TODO_FORM_INPUT_LABEL: string = \"Add a new to-do\";\nexport const TODO_FORM_INPUT_PLACEHOLDER: string = \"Type a new to-do here\";\nexport const TODO_FORM_ADD_BUTTON_TITLE: string = \"Add a to-do\";\nexport const SEARCH_FORM_INPUT_LABEL: string = \"Find a to-do by a keyword\"\nexport const SEARCH_FORM_INPUT_PLACEHOLDER: string = \"Type a keyword here\"\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { BACK_BUTTON_LABEL } from '../constants/constants';\n\nexport const About: React.FC = () => {\n    \n    const history = useHistory();\n\n    const handleClickBackButton = () => history.push('/');\n\n    return (\n        <div className=\"centered-content\">\n            <p className=\"center\">This is a page about project</p>\n            <button\n                type=\"button\"\n                id=\"back\"\n                name=\"back\"\n                className=\"btn-small waves-effect waves-light\"\n                onClick={handleClickBackButton}\n            >\n                {BACK_BUTTON_LABEL}\n            </button>\n        </div>\n    )\n};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { ABOUT_LINK_LABEL, LOGO_TEXT, TODOLIST_LINK_LABEL } from '../constants/constants';\n\nexport const Header: React.FC = () => {\n    return (\n        <nav>\n            <div className=\"nav-wrapper padding-lr purple darken-3\">\n                <NavLink exact to=\"#!\" className=\"brand-logo left\">{LOGO_TEXT}</NavLink>\n                <ul id=\"nav-mobile\" className=\"right hide-on-small-only\">\n                    <li><NavLink to=\"/\" exact>{TODOLIST_LINK_LABEL}</NavLink></li>\n                    <li><NavLink to=\"/about\">{ABOUT_LINK_LABEL}</NavLink></li>\n                </ul>\n            </div>\n        </nav>\n        \n    );\n}","import React, { useState } from \"react\";\nimport { ITodoFormProps } from \"../interfaces\";\nimport classNames  from \"classnames\";\nimport { TODO_FORM_INPUT_LABEL, TODO_FORM_INPUT_PLACEHOLDER, TODO_FORM_ADD_BUTTON_TITLE } from \"../constants/constants\";\n\n/**\n * @function TodoForm\n * @description Функциональный компонент\n * Форма добавления задачи.\n * @param {ITodoFormProps} props\n * @property {function} props.onAddTodo - метод сохранения набранной задачи \n * @returns {void} void\n * @since v.1.0.0\n * @public\n */\nexport const TodoForm: React.FC<ITodoFormProps> = (props) => {\n  const [value, setValue] = useState<string>('')\n  const { onAddTodo } = props;\n\n  const addIconClassName = classNames(\"material-icons\", \n    {\n      \"purple-text text-darken-2\": value,\n      \"grey-text text-lighten-1\": !value\n  } )\n  /**\n   * @method handleInputChange\n   * @description Обработчик ввода значений в инпут добавления задачи\n   * @param {SyntheticEvent} evt - событие\n   * @returns {void} void\n   * @since v.1.0.0\n   * @public\n   */\n  const handleInputChange = (evt: React.ChangeEvent<HTMLInputElement>): void => {\n    setValue(evt.target.value)\n  }\n\n  /**\n   * @method handlePressEnter\n   * @description Обработчик нажатия на \"Enter\" - сохранения набранной задачи\n   * @param {SyntheticEvent} evt - событие\n   * @returns {void} void\n   * @since v.1.0.0\n   * @public\n   */\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    onAddTodo(value);\n    setValue('');\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"todo-form\">\n      <div className=\"input-field mt2\">\n        <input\n          value={value}\n          onChange={handleInputChange}\n          type=\"text\"\n          id=\"add-form-title\"\n          placeholder={TODO_FORM_INPUT_PLACEHOLDER}\n        />\n        <label htmlFor=\"title\" className=\"active\">\n          {TODO_FORM_INPUT_LABEL}\n        </label>\n      </div>\n      <button\n        id=\"add-submit\"\n        type=\"submit\"\n        disabled={!value}\n        title={value ? TODO_FORM_ADD_BUTTON_TITLE : ''}\n      >\n        <i\n          className={addIconClassName}>add</i>\n      </button>\n\n    </form>\n  )\n}","import React from \"react\";\nimport classNames from 'classnames';\nimport { ITodoProps } from \"../interfaces\";\n\n/*\nМожно указать типы пропс в виде объекта типов.\ntype TodoProps = {\n    id: number\n    completed: boolean\n    todoText: string\n    isImportant: boolean\n    onToggle: (id: number) => void\n    handleClickDeleteIcon: (id: number) => void\n    onTogglePriority: (id: number) => void\n} */\n\nexport const Todo: React.FC<ITodoProps> = ({\n    id,\n    completed,\n    todoText,\n    isImportant,\n    onToggle,\n    handleClickDeleteIcon,\n    onTogglePriority }) => {\n\n    const todoClassName = classNames(\"todo \", {\n        \"completed\": completed,\n        \"important\": isImportant\n    })\n\n    const priorityIconClassName = classNames(\"material-icons purple-text\", {\n        \"text-darken-3\": isImportant,\n        \"text-accent-1\": !isImportant\n    })\n\n    return (\n        <li key={id} className={todoClassName} >\n            <label className=\"label\">\n                <input\n                    id=\"checkbox\"\n                    type=\"checkbox\"\n                    checked={completed}\n                    onChange={() => onToggle(id)}\n                />\n                <span >{todoText}</span>\n\n            </label>\n            <div className=\"icons\">\n                <i\n                    className={priorityIconClassName}\n                    onClick={() => onTogglePriority(id)}\n                >priority_high</i>\n                <i\n                    className=\"material-icons red-text\"\n                    onClick={() => handleClickDeleteIcon(id)} >delete</i>\n            </div>\n        </li>\n    )\n};","import React from 'react';\nimport { Todo } from './Todo';\nimport { ITodoListProps } from '../interfaces';\nimport { TODOLIST_IS_EMPTY } from '../constants/constants';\n\nexport const TodoList: React.FC<ITodoListProps> = ({ todos, onToggle, handleClickDeleteIcon, onTogglePriority }) => {\n  if (!todos.length) { return <h5 className=\"center no-todos-title\">{TODOLIST_IS_EMPTY }</h5 >}\n    return (\n      <ul>\n        {todos.map(todo => {\n          const { id, completed, todoText, isImportant } = todo\n          return (\n            <Todo\n              key={id}\n              id={id}\n              completed={completed}\n              todoText={todoText}\n              isImportant={isImportant}\n              onToggle={onToggle}\n              handleClickDeleteIcon={handleClickDeleteIcon}\n              onTogglePriority={onTogglePriority}\n            />\n          )}\n        )}\n      </ul>\n    );\n}","import { createContext } from \"react\";\nimport { ITodo } from '../interfaces'\n\nexport const TodosContext = createContext([] as ITodo[]);","import { createContext } from 'react';\nimport { ITodo } from '../interfaces';\n\nexport const FilteredListContext = createContext([] as ITodo[]);","import React, { useState, useContext } from 'react';\nimport { TodosContext } from '../contexts/todosContext';\nimport classNames from 'classnames';\nimport { SEARCH_FORM_INPUT_LABEL, SEARCH_FORM_INPUT_PLACEHOLDER } from '../constants/constants';\nimport { ITodo, IFilterPanelProps } from '../interfaces';\n\nexport const FilterPanel:React.FC<IFilterPanelProps> = ({setFilteredListToState}) => {\n    const todosList = useContext(TodosContext);\n    const [value, setValue] = useState<string>('')\n\n    const searchIconClassName = classNames(\"material-icons\",\n        {\n            \"purple-text text-darken-2\": value,\n            \"grey-text text-lighten-1\": !value\n        })\n\n    /**\n     * @method handleInputChange\n     * @description Обработчик ввода значений в инпут добавления задачи\n     * @param {SyntheticEvent} evt - событие\n     * @returns {void} void\n     * @since v.1.0.0\n     * @public\n     */\n    const handleInputChange = (evt: React.ChangeEvent<HTMLInputElement>): void => {\n        setValue(evt.target.value);\n        const filteredList: ITodo[] = todosList\n            .filter(todo => todo\n                .todoText\n                .toLowerCase()\n                .includes(evt.target.value.toLowerCase()));\n        setFilteredListToState(filteredList, true);\n    }\n\n    const handleClickImportantButton = ():void => {\n        const filteredList: ITodo[] = todosList\n            .filter(todo => todo.isImportant);\n        setFilteredListToState(filteredList, true);\n        }\n\n    const handleClickDoneButton = (): void => {\n        const filteredList: ITodo[] = todosList\n            .filter(todo => todo.completed);\n        setFilteredListToState(filteredList, true);\n       }\n\n    const handleClickActiveButton = (): void => {\n        const filteredList: ITodo[] = todosList.filter(todo => !todo.completed);\n        setFilteredListToState(filteredList, true);\n    }\n\n    const handleClickResetButton = () => {\n        setFilteredListToState([], false);\n        setValue('');\n    }\n\n    /**\n     * @method handlePressEnter\n     * @description Обработчик нажатия на \"Enter\" - сохранения набранной задачи\n     * @param {SyntheticEvent} evt - событие\n     * @returns {void} void\n     * @since v.1.0.0\n     * @public\n     */\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        setValue('');\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className=\"todo-form\">\n            <div className=\"form-field\">\n                <div className=\"input-field mt2\">\n                    <input\n                        value={value}\n                        onChange={handleInputChange}\n                        type=\"text\"\n                        id=\"filter-panel-title\"\n                        placeholder={SEARCH_FORM_INPUT_PLACEHOLDER}\n                    />\n                    <label htmlFor=\"title\" className=\"active\">\n                        {SEARCH_FORM_INPUT_LABEL}\n                    </label>\n                </div>\n                <button\n                    id=\"search-submit\"\n                    type=\"submit\"\n                    disabled={!value}\n                >\n                    <i\n                        id=\"search-icon\"\n                        className={searchIconClassName}\n                    >search</i>\n                </button>\n            </div>\n\n            <button\n                type=\"button\"\n                className=\"filter-button waves-effect waves-light btn-small\"\n                onClick={handleClickResetButton}\n            >Reset</button>\n            <button\n                type=\"button\"\n                className=\"filter-button waves-effect waves-light btn-small \"\n                onClick={handleClickImportantButton}\n            >Important</button>\n            <button\n                type=\"button\"\n                className=\"filter-button waves-effect waves-light btn-small\"\n                onClick={handleClickDoneButton}\n            >Done</button>\n            <button\n                type=\"button\"\n                className=\"filter-button waves-effect waves-light btn-small\"\n                onClick={handleClickActiveButton}\n            >Active</button>\n\n        </form>\n    )\n}","import React, { useContext } from 'react';\nimport { TodoForm } from './TodoForm';\nimport { TodoList } from './TodoList';\nimport { TodosContext } from '../contexts/todosContext';\nimport { FilteredListContext } from '../contexts/filteredListContext';\nimport { IMainPageProps } from '../interfaces';\nimport { FilterPanel } from './FilterPanel';\n\nexport const MainPage: React.FC<IMainPageProps> = (props) => {\n  const {\n    handleAddTodo,\n    toggleTodo,\n    handleClickDeleteIcon,\n    togglePriority,\n    setFilteredListToState,\n    isFiltered,\n  } = props;\n  const todos = useContext(TodosContext);\n  const filteredList = useContext(FilteredListContext);\n  //const isFiltered: boolean = !!filteredList.length;\n\n  return (\n    <>\n      <TodoForm onAddTodo={handleAddTodo} />\n      <FilterPanel setFilteredListToState={setFilteredListToState} />\n      <TodoList\n        todos={isFiltered ? filteredList : todos}\n        onToggle={toggleTodo}\n        handleClickDeleteIcon={handleClickDeleteIcon}\n        onTogglePriority={togglePriority}\n      />\n    </>\n  )\n}\n\n\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { ITodo } from '../interfaces';\nimport { TODOS_KEY } from '../constants/constants';\nimport { getDataFromStorage, setDataToStorage } from '../utils/storage';\nimport { About } from './About';\nimport { Header } from './Header';\nimport { MainPage } from './MainPage';\nimport { TodosContext } from '../contexts/todosContext';\nimport { FilteredListContext } from '../contexts/filteredListContext';\n\nconst App: React.FC = () => {\n\n  const { Provider: TodosProvider } = TodosContext;\n  const { Provider: FilteredListProvider } = FilteredListContext;\n\n  const [todos, setTodos] = useState<ITodo[]>(getDataFromStorage(TODOS_KEY));\n  const [filteredList, setFilteredList] = useState<ITodo[]>([]);\n  const [isFiltered, setIsFiltered] = useState(false);\n\n  const handleAddTodo = useCallback((todoText: string): void => {\n    const newTodo: ITodo = {\n      todoText,\n      id: Date.now(),\n      completed: false,\n      isImportant: false,\n    }\n    setTodos(prev => [newTodo, ...prev]);\n  }, []);\n\n  const toggleTodo = useCallback((id: number) => {\n\n    setTodos(todos.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed\n      }\n      return todo;\n    }))\n  }, [todos]);\n\n  const togglePriority = useCallback((id: number) => {\n    setTodos(todos.map(todo => {\n      if (todo.id === id) {\n        todo.isImportant = !todo.isImportant\n      }\n      return todo\n    }))\n  }, [todos]);\n\n  const handleClickDeleteIcon = useCallback((id: number): void => {\n    setTodos(prev => prev.filter(todo => todo.id !== id));\n  }, []);\n\n  const setFilteredListToState = (newFilteredList: ITodo[], isFilteredNewValue: boolean): void => {\n    if (isFiltered !== isFilteredNewValue) {\n    setIsFiltered(isFilteredNewValue);\n    }\n    if (!filteredList.length && !newFilteredList.length) return;\n    setFilteredList(newFilteredList);\n    \n   };\n\n  useEffect(() => {\n    setDataToStorage(TODOS_KEY, todos)\n  }, [todos]);\n\n  return (\n\n    <TodosProvider value={todos}>\n      <FilteredListProvider value={filteredList} >\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            render={() => (\n              <MainPage\n                handleAddTodo={handleAddTodo}\n                toggleTodo={toggleTodo}\n                togglePriority={togglePriority}\n                handleClickDeleteIcon={handleClickDeleteIcon}\n                setFilteredListToState={setFilteredListToState}\n                isFiltered={isFiltered}\n              />)}\n          />\n\n          <Route path=\"/about\" component={About} />\n          <Route>\n            <Redirect to=\"/\" />\n          </Route>\n        </Switch>\n      </div>\n      </FilteredListProvider>\n    </TodosProvider>\n  );\n\n\n}\n\n\nexport default App;\n","import { ITodo } from \"../interfaces\";\n\nexport const getDataFromStorage = (datakey: string) => JSON.parse(localStorage.getItem(datakey) || '[]') as ITodo[];\n\nexport const setDataToStorage = ((datakey:string, data:ITodo[]):void => localStorage.setItem(datakey, JSON.stringify(data)))","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport {render} from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nrender(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}